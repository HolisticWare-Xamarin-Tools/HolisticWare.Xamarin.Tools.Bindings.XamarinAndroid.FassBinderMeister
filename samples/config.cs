// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("mavenRepositoryType")]
        public string MavenRepositoryType { get; set; }

        [JsonProperty("slnFile")]
        public string SlnFile { get; set; }

        [JsonProperty("debug")]
        public Debug Debug { get; set; }

        [JsonProperty("additionalProjects")]
        public string[] AdditionalProjects { get; set; }

        [JsonProperty("templates")]
        public Template[] Templates { get; set; }

        [JsonProperty("artifacts")]
        public Artifact[] Artifacts { get; set; }
    }

    public partial class Artifact
    {
        [JsonProperty("groupId")]
        public GroupId GroupId { get; set; }

        [JsonProperty("artifactId")]
        public string ArtifactId { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("nugetVersion", NullValueHandling = NullValueHandling.Ignore)]
        public NugetVersion? NugetVersion { get; set; }

        [JsonProperty("nugetId")]
        public string NugetId { get; set; }

        [JsonProperty("dependencyOnly", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DependencyOnly { get; set; }
    }

    public partial class Debug
    {
        [JsonProperty("DumpModels")]
        public bool DumpModels { get; set; }
    }

    public partial class Template
    {
        [JsonProperty("templateFile")]
        public string TemplateFile { get; set; }

        [JsonProperty("outputFileRule")]
        public string OutputFileRule { get; set; }
    }

    public enum GroupId { AndroidArchCore, AndroidArchLifecycle, ComAndroidSupport, ComGoogleAndroidGms, ComGoogleFirebase, ComGoogleProtobuf, ComSquareupOkhttp, OrgTensorflow };

    public enum NugetVersion { The7115000Preview2, The7115010Preview2, The7115020Preview2, The7115100Preview2, The7115200Preview2, The7116000Preview2, The7116020Preview2 };

    public partial class Welcome
    {
        public static Welcome[] FromJson(string json) => JsonConvert.DeserializeObject<Welcome[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                GroupIdConverter.Singleton,
                NugetVersionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class GroupIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GroupId) || t == typeof(GroupId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "android.arch.core":
                    return GroupId.AndroidArchCore;
                case "android.arch.lifecycle":
                    return GroupId.AndroidArchLifecycle;
                case "com.android.support":
                    return GroupId.ComAndroidSupport;
                case "com.google.android.gms":
                    return GroupId.ComGoogleAndroidGms;
                case "com.google.firebase":
                    return GroupId.ComGoogleFirebase;
                case "com.google.protobuf":
                    return GroupId.ComGoogleProtobuf;
                case "com.squareup.okhttp":
                    return GroupId.ComSquareupOkhttp;
                case "org.tensorflow":
                    return GroupId.OrgTensorflow;
            }
            throw new Exception("Cannot unmarshal type GroupId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GroupId)untypedValue;
            switch (value)
            {
                case GroupId.AndroidArchCore:
                    serializer.Serialize(writer, "android.arch.core");
                    return;
                case GroupId.AndroidArchLifecycle:
                    serializer.Serialize(writer, "android.arch.lifecycle");
                    return;
                case GroupId.ComAndroidSupport:
                    serializer.Serialize(writer, "com.android.support");
                    return;
                case GroupId.ComGoogleAndroidGms:
                    serializer.Serialize(writer, "com.google.android.gms");
                    return;
                case GroupId.ComGoogleFirebase:
                    serializer.Serialize(writer, "com.google.firebase");
                    return;
                case GroupId.ComGoogleProtobuf:
                    serializer.Serialize(writer, "com.google.protobuf");
                    return;
                case GroupId.ComSquareupOkhttp:
                    serializer.Serialize(writer, "com.squareup.okhttp");
                    return;
                case GroupId.OrgTensorflow:
                    serializer.Serialize(writer, "org.tensorflow");
                    return;
            }
            throw new Exception("Cannot marshal type GroupId");
        }

        public static readonly GroupIdConverter Singleton = new GroupIdConverter();
    }

    internal class NugetVersionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NugetVersion) || t == typeof(NugetVersion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "71.1500.0-preview2":
                    return NugetVersion.The7115000Preview2;
                case "71.1501.0-preview2":
                    return NugetVersion.The7115010Preview2;
                case "71.1502.0-preview2":
                    return NugetVersion.The7115020Preview2;
                case "71.1510.0-preview2":
                    return NugetVersion.The7115100Preview2;
                case "71.1520.0-preview2":
                    return NugetVersion.The7115200Preview2;
                case "71.1600.0-preview2":
                    return NugetVersion.The7116000Preview2;
                case "71.1602.0-preview2":
                    return NugetVersion.The7116020Preview2;
            }
            throw new Exception("Cannot unmarshal type NugetVersion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NugetVersion)untypedValue;
            switch (value)
            {
                case NugetVersion.The7115000Preview2:
                    serializer.Serialize(writer, "71.1500.0-preview2");
                    return;
                case NugetVersion.The7115010Preview2:
                    serializer.Serialize(writer, "71.1501.0-preview2");
                    return;
                case NugetVersion.The7115020Preview2:
                    serializer.Serialize(writer, "71.1502.0-preview2");
                    return;
                case NugetVersion.The7115100Preview2:
                    serializer.Serialize(writer, "71.1510.0-preview2");
                    return;
                case NugetVersion.The7115200Preview2:
                    serializer.Serialize(writer, "71.1520.0-preview2");
                    return;
                case NugetVersion.The7116000Preview2:
                    serializer.Serialize(writer, "71.1600.0-preview2");
                    return;
                case NugetVersion.The7116020Preview2:
                    serializer.Serialize(writer, "71.1602.0-preview2");
                    return;
            }
            throw new Exception("Cannot marshal type NugetVersion");
        }

        public static readonly NugetVersionConverter Singleton = new NugetVersionConverter();
    }
}
