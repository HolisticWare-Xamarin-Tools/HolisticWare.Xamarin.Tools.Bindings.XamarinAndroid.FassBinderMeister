// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using HolisticWare.DotNetAndroid.Bindings.SARIF.Generated.NewtonSoft;
//
//    var holisticWareGoogleAutoValueSarifNewtonSoftGenerated = HolisticWareGoogleAutoValueSarifNewtonSoftGenerated.FromJson(jsonString);

namespace HolisticWare.DotNetAndroid.Bindings.SARIF.Generated.NewtonSoft
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class HolisticWareGoogleAutoValueSarifNewtonSoftGenerated
    {
        [JsonProperty("$schema")]
        public Uri Schema { get; set; }

        [JsonProperty("runs")]
        public Run[] Runs { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }
    }

    public partial class Run
    {
        [JsonProperty("results")]
        public Result[] Results { get; set; }

        [JsonProperty("rules")]
        public Rules Rules { get; set; }

        [JsonProperty("tool")]
        public Tool Tool { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("level")]
        public Level Level { get; set; }

        [JsonProperty("locations")]
        public Location[] Locations { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ResultProperties Properties { get; set; }

        [JsonProperty("ruleId")]
        public RuleId RuleId { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("resultFile")]
        public ResultFile ResultFile { get; set; }
    }

    public partial class ResultFile
    {
        [JsonProperty("region")]
        public Region Region { get; set; }

        [JsonProperty("uri")]
        public string Uri { get; set; }
    }

    public partial class Region
    {
        [JsonProperty("endColumn")]
        public long EndColumn { get; set; }

        [JsonProperty("endLine")]
        public long EndLine { get; set; }

        [JsonProperty("startColumn")]
        public long StartColumn { get; set; }

        [JsonProperty("startLine")]
        public long StartLine { get; set; }
    }

    public partial class ResultProperties
    {
        [JsonProperty("warningLevel")]
        public long WarningLevel { get; set; }
    }

    public partial class Rules
    {
        [JsonProperty("CS0102")]
        public Cs0102 Cs0102 { get; set; }

        [JsonProperty("CS0108")]
        public Cs0108 Cs0108 { get; set; }

        [JsonProperty("CS0111")]
        public Cs0102 Cs0111 { get; set; }

        [JsonProperty("CS0114")]
        public Cs0102 Cs0114 { get; set; }

        [JsonProperty("CS0115")]
        public Cs0102 Cs0115 { get; set; }

        [JsonProperty("CS0234")]
        public Cs0102 Cs0234 { get; set; }

        [JsonProperty("CS0426")]
        public Cs0102 Cs0426 { get; set; }

        [JsonProperty("CS0505")]
        public Cs0102 Cs0505 { get; set; }

        [JsonProperty("CS0507")]
        public Cs0102 Cs0507 { get; set; }

        [JsonProperty("CS0508")]
        public Cs0102 Cs0508 { get; set; }

        [JsonProperty("CS0533")]
        public Cs0102 Cs0533 { get; set; }

        [JsonProperty("CS0534")]
        public Cs0102 Cs0534 { get; set; }

        [JsonProperty("CS0535")]
        public Cs0102 Cs0535 { get; set; }

        [JsonProperty("CS0540")]
        public Cs0102 Cs0540 { get; set; }

        [JsonProperty("CS0549")]
        public Cs0102 Cs0549 { get; set; }

        [JsonProperty("CS0618")]
        public Cs0102 Cs0618 { get; set; }

        [JsonProperty("CS0737")]
        public Cs0102 Cs0737 { get; set; }

        [JsonProperty("CS0738")]
        public Cs0102 Cs0738 { get; set; }

        [JsonProperty("CS0809")]
        public Cs0102 Cs0809 { get; set; }

        [JsonProperty("CS8764")]
        public Cs0102 Cs8764 { get; set; }

        [JsonProperty("CS8766")]
        public Cs0102 Cs8766 { get; set; }

        [JsonProperty("CS8768")]
        public Cs0102 Cs8768 { get; set; }

        [JsonProperty("XAOBS001")]
        public Cs0102 Xaobs001 { get; set; }
    }

    public partial class Cs0102
    {
        [JsonProperty("defaultLevel")]
        public Level DefaultLevel { get; set; }

        [JsonProperty("helpUri")]
        public Uri HelpUri { get; set; }

        [JsonProperty("id")]
        public RuleId Id { get; set; }

        [JsonProperty("properties")]
        public Cs0102Properties Properties { get; set; }

        [JsonProperty("shortDescription", NullValueHandling = NullValueHandling.Ignore)]
        public string ShortDescription { get; set; }
    }

    public partial class Cs0102Properties
    {
        [JsonProperty("category")]
        public Category Category { get; set; }

        [JsonProperty("isEnabledByDefault")]
        public bool IsEnabledByDefault { get; set; }

        [JsonProperty("tags")]
        public Category[] Tags { get; set; }
    }

    public partial class Cs0108
    {
        [JsonProperty("defaultLevel")]
        public Level DefaultLevel { get; set; }

        [JsonProperty("fullDescription")]
        public string FullDescription { get; set; }

        [JsonProperty("helpUri")]
        public Uri HelpUri { get; set; }

        [JsonProperty("id")]
        public RuleId Id { get; set; }

        [JsonProperty("properties")]
        public Cs0102Properties Properties { get; set; }

        [JsonProperty("shortDescription")]
        public string ShortDescription { get; set; }
    }

    public partial class Tool
    {
        [JsonProperty("fileVersion")]
        public string FileVersion { get; set; }

        [JsonProperty("language")]
        public string Language { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("semanticVersion")]
        public string SemanticVersion { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }
    }

    public enum Level { Error, Warning };

    public enum RuleId { Cs0102, Cs0108, Cs0111, Cs0114, Cs0115, Cs0234, Cs0426, Cs0505, Cs0507, Cs0508, Cs0533, Cs0534, Cs0535, Cs0540, Cs0549, Cs0618, Cs0737, Cs0738, Cs0809, Cs8764, Cs8766, Cs8768, Xaobs001 };

    public enum Category { Compiler, CustomObsolete, NotConfigurable, Telemetry };

    public partial class HolisticWareGoogleAutoValueSarifNewtonSoftGenerated
    {
        public static HolisticWareGoogleAutoValueSarifNewtonSoftGenerated FromJson(string json) => JsonConvert.DeserializeObject<HolisticWareGoogleAutoValueSarifNewtonSoftGenerated>(json, HolisticWare.DotNetAndroid.Bindings.SARIF.Generated.NewtonSoft.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this HolisticWareGoogleAutoValueSarifNewtonSoftGenerated self) => JsonConvert.SerializeObject(self, HolisticWare.DotNetAndroid.Bindings.SARIF.Generated.NewtonSoft.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LevelConverter.Singleton,
                RuleIdConverter.Singleton,
                CategoryConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class LevelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Level) || t == typeof(Level?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "error":
                    return Level.Error;
                case "warning":
                    return Level.Warning;
            }
            throw new Exception("Cannot unmarshal type Level");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Level)untypedValue;
            switch (value)
            {
                case Level.Error:
                    serializer.Serialize(writer, "error");
                    return;
                case Level.Warning:
                    serializer.Serialize(writer, "warning");
                    return;
            }
            throw new Exception("Cannot marshal type Level");
        }

        public static readonly LevelConverter Singleton = new LevelConverter();
    }

    internal class RuleIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(RuleId) || t == typeof(RuleId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CS0102":
                    return RuleId.Cs0102;
                case "CS0108":
                    return RuleId.Cs0108;
                case "CS0111":
                    return RuleId.Cs0111;
                case "CS0114":
                    return RuleId.Cs0114;
                case "CS0115":
                    return RuleId.Cs0115;
                case "CS0234":
                    return RuleId.Cs0234;
                case "CS0426":
                    return RuleId.Cs0426;
                case "CS0505":
                    return RuleId.Cs0505;
                case "CS0507":
                    return RuleId.Cs0507;
                case "CS0508":
                    return RuleId.Cs0508;
                case "CS0533":
                    return RuleId.Cs0533;
                case "CS0534":
                    return RuleId.Cs0534;
                case "CS0535":
                    return RuleId.Cs0535;
                case "CS0540":
                    return RuleId.Cs0540;
                case "CS0549":
                    return RuleId.Cs0549;
                case "CS0618":
                    return RuleId.Cs0618;
                case "CS0737":
                    return RuleId.Cs0737;
                case "CS0738":
                    return RuleId.Cs0738;
                case "CS0809":
                    return RuleId.Cs0809;
                case "CS8764":
                    return RuleId.Cs8764;
                case "CS8766":
                    return RuleId.Cs8766;
                case "CS8768":
                    return RuleId.Cs8768;
                case "XAOBS001":
                    return RuleId.Xaobs001;
            }
            throw new Exception("Cannot unmarshal type RuleId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (RuleId)untypedValue;
            switch (value)
            {
                case RuleId.Cs0102:
                    serializer.Serialize(writer, "CS0102");
                    return;
                case RuleId.Cs0108:
                    serializer.Serialize(writer, "CS0108");
                    return;
                case RuleId.Cs0111:
                    serializer.Serialize(writer, "CS0111");
                    return;
                case RuleId.Cs0114:
                    serializer.Serialize(writer, "CS0114");
                    return;
                case RuleId.Cs0115:
                    serializer.Serialize(writer, "CS0115");
                    return;
                case RuleId.Cs0234:
                    serializer.Serialize(writer, "CS0234");
                    return;
                case RuleId.Cs0426:
                    serializer.Serialize(writer, "CS0426");
                    return;
                case RuleId.Cs0505:
                    serializer.Serialize(writer, "CS0505");
                    return;
                case RuleId.Cs0507:
                    serializer.Serialize(writer, "CS0507");
                    return;
                case RuleId.Cs0508:
                    serializer.Serialize(writer, "CS0508");
                    return;
                case RuleId.Cs0533:
                    serializer.Serialize(writer, "CS0533");
                    return;
                case RuleId.Cs0534:
                    serializer.Serialize(writer, "CS0534");
                    return;
                case RuleId.Cs0535:
                    serializer.Serialize(writer, "CS0535");
                    return;
                case RuleId.Cs0540:
                    serializer.Serialize(writer, "CS0540");
                    return;
                case RuleId.Cs0549:
                    serializer.Serialize(writer, "CS0549");
                    return;
                case RuleId.Cs0618:
                    serializer.Serialize(writer, "CS0618");
                    return;
                case RuleId.Cs0737:
                    serializer.Serialize(writer, "CS0737");
                    return;
                case RuleId.Cs0738:
                    serializer.Serialize(writer, "CS0738");
                    return;
                case RuleId.Cs0809:
                    serializer.Serialize(writer, "CS0809");
                    return;
                case RuleId.Cs8764:
                    serializer.Serialize(writer, "CS8764");
                    return;
                case RuleId.Cs8766:
                    serializer.Serialize(writer, "CS8766");
                    return;
                case RuleId.Cs8768:
                    serializer.Serialize(writer, "CS8768");
                    return;
                case RuleId.Xaobs001:
                    serializer.Serialize(writer, "XAOBS001");
                    return;
            }
            throw new Exception("Cannot marshal type RuleId");
        }

        public static readonly RuleIdConverter Singleton = new RuleIdConverter();
    }

    internal class CategoryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Category) || t == typeof(Category?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Compiler":
                    return Category.Compiler;
                case "CustomObsolete":
                    return Category.CustomObsolete;
                case "NotConfigurable":
                    return Category.NotConfigurable;
                case "Telemetry":
                    return Category.Telemetry;
            }
            throw new Exception("Cannot unmarshal type Category");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Category)untypedValue;
            switch (value)
            {
                case Category.Compiler:
                    serializer.Serialize(writer, "Compiler");
                    return;
                case Category.CustomObsolete:
                    serializer.Serialize(writer, "CustomObsolete");
                    return;
                case Category.NotConfigurable:
                    serializer.Serialize(writer, "NotConfigurable");
                    return;
                case Category.Telemetry:
                    serializer.Serialize(writer, "Telemetry");
                    return;
            }
            throw new Exception("Cannot marshal type Category");
        }

        public static readonly CategoryConverter Singleton = new CategoryConverter();
    }
}
