// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using HolisticWare.DotNetAndroid.Bindings.SARIF.Generated.SystemTextJson;
//
//    var holisticWareGoogleAutoValueSarifSystemTextJsonGenerated = HolisticWareGoogleAutoValueSarifSystemTextJsonGenerated.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace HolisticWare.DotNetAndroid.Bindings.SARIF.Generated.SystemTextJson
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class HolisticWareGoogleAutoValueSarifSystemTextJsonGenerated
    {
        [JsonPropertyName("$schema")]
        public Uri Schema { get; set; }

        [JsonPropertyName("runs")]
        public Run[] Runs { get; set; }

        [JsonPropertyName("version")]
        public string Version { get; set; }
    }

    public partial class Run
    {
        [JsonPropertyName("results")]
        public Result[] Results { get; set; }

        [JsonPropertyName("rules")]
        public Rules Rules { get; set; }

        [JsonPropertyName("tool")]
        public Tool Tool { get; set; }
    }

    public partial class Result
    {
        [JsonPropertyName("level")]
        public Level Level { get; set; }

        [JsonPropertyName("locations")]
        public Location[] Locations { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("properties")]
        public ResultProperties Properties { get; set; }

        [JsonPropertyName("ruleId")]
        public RuleId RuleId { get; set; }
    }

    public partial class Location
    {
        [JsonPropertyName("resultFile")]
        public ResultFile ResultFile { get; set; }
    }

    public partial class ResultFile
    {
        [JsonPropertyName("region")]
        public Region Region { get; set; }

        [JsonPropertyName("uri")]
        public string Uri { get; set; }
    }

    public partial class Region
    {
        [JsonPropertyName("endColumn")]
        public long EndColumn { get; set; }

        [JsonPropertyName("endLine")]
        public long EndLine { get; set; }

        [JsonPropertyName("startColumn")]
        public long StartColumn { get; set; }

        [JsonPropertyName("startLine")]
        public long StartLine { get; set; }
    }

    public partial class ResultProperties
    {
        [JsonPropertyName("warningLevel")]
        public long WarningLevel { get; set; }
    }

    public partial class Rules
    {
        [JsonPropertyName("CS0102")]
        public Cs0102 Cs0102 { get; set; }

        [JsonPropertyName("CS0108")]
        public Cs0108 Cs0108 { get; set; }

        [JsonPropertyName("CS0111")]
        public Cs0102 Cs0111 { get; set; }

        [JsonPropertyName("CS0114")]
        public Cs0102 Cs0114 { get; set; }

        [JsonPropertyName("CS0115")]
        public Cs0102 Cs0115 { get; set; }

        [JsonPropertyName("CS0234")]
        public Cs0102 Cs0234 { get; set; }

        [JsonPropertyName("CS0426")]
        public Cs0102 Cs0426 { get; set; }

        [JsonPropertyName("CS0505")]
        public Cs0102 Cs0505 { get; set; }

        [JsonPropertyName("CS0507")]
        public Cs0102 Cs0507 { get; set; }

        [JsonPropertyName("CS0508")]
        public Cs0102 Cs0508 { get; set; }

        [JsonPropertyName("CS0533")]
        public Cs0102 Cs0533 { get; set; }

        [JsonPropertyName("CS0534")]
        public Cs0102 Cs0534 { get; set; }

        [JsonPropertyName("CS0535")]
        public Cs0102 Cs0535 { get; set; }

        [JsonPropertyName("CS0540")]
        public Cs0102 Cs0540 { get; set; }

        [JsonPropertyName("CS0549")]
        public Cs0102 Cs0549 { get; set; }

        [JsonPropertyName("CS0618")]
        public Cs0102 Cs0618 { get; set; }

        [JsonPropertyName("CS0737")]
        public Cs0102 Cs0737 { get; set; }

        [JsonPropertyName("CS0738")]
        public Cs0102 Cs0738 { get; set; }

        [JsonPropertyName("CS0809")]
        public Cs0102 Cs0809 { get; set; }

        [JsonPropertyName("CS8764")]
        public Cs0102 Cs8764 { get; set; }

        [JsonPropertyName("CS8766")]
        public Cs0102 Cs8766 { get; set; }

        [JsonPropertyName("CS8768")]
        public Cs0102 Cs8768 { get; set; }

        [JsonPropertyName("XAOBS001")]
        public Cs0102 Xaobs001 { get; set; }
    }

    public partial class Cs0102
    {
        [JsonPropertyName("defaultLevel")]
        public Level DefaultLevel { get; set; }

        [JsonPropertyName("helpUri")]
        public Uri HelpUri { get; set; }

        [JsonPropertyName("id")]
        public RuleId Id { get; set; }

        [JsonPropertyName("properties")]
        public Cs0102Properties Properties { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("shortDescription")]
        public string ShortDescription { get; set; }
    }

    public partial class Cs0102Properties
    {
        [JsonPropertyName("category")]
        public Category Category { get; set; }

        [JsonPropertyName("isEnabledByDefault")]
        public bool IsEnabledByDefault { get; set; }

        [JsonPropertyName("tags")]
        public Category[] Tags { get; set; }
    }

    public partial class Cs0108
    {
        [JsonPropertyName("defaultLevel")]
        public Level DefaultLevel { get; set; }

        [JsonPropertyName("fullDescription")]
        public string FullDescription { get; set; }

        [JsonPropertyName("helpUri")]
        public Uri HelpUri { get; set; }

        [JsonPropertyName("id")]
        public RuleId Id { get; set; }

        [JsonPropertyName("properties")]
        public Cs0102Properties Properties { get; set; }

        [JsonPropertyName("shortDescription")]
        public string ShortDescription { get; set; }
    }

    public partial class Tool
    {
        [JsonPropertyName("fileVersion")]
        public string FileVersion { get; set; }

        [JsonPropertyName("language")]
        public string Language { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("semanticVersion")]
        public string SemanticVersion { get; set; }

        [JsonPropertyName("version")]
        public string Version { get; set; }
    }

    public enum Level { Error, Warning };

    public enum RuleId { Cs0102, Cs0108, Cs0111, Cs0114, Cs0115, Cs0234, Cs0426, Cs0505, Cs0507, Cs0508, Cs0533, Cs0534, Cs0535, Cs0540, Cs0549, Cs0618, Cs0737, Cs0738, Cs0809, Cs8764, Cs8766, Cs8768, Xaobs001 };

    public enum Category { Compiler, CustomObsolete, NotConfigurable, Telemetry };

    public partial class HolisticWareGoogleAutoValueSarifSystemTextJsonGenerated
    {
        public static HolisticWareGoogleAutoValueSarifSystemTextJsonGenerated FromJson(string json) => JsonSerializer.Deserialize<HolisticWareGoogleAutoValueSarifSystemTextJsonGenerated>(json, HolisticWare.DotNetAndroid.Bindings.SARIF.Generated.SystemTextJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this HolisticWareGoogleAutoValueSarifSystemTextJsonGenerated self) => JsonSerializer.Serialize(self, HolisticWare.DotNetAndroid.Bindings.SARIF.Generated.SystemTextJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                LevelConverter.Singleton,
                RuleIdConverter.Singleton,
                CategoryConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class LevelConverter : JsonConverter<Level>
    {
        public override bool CanConvert(Type t) => t == typeof(Level);

        public override Level Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "error":
                    return Level.Error;
                case "warning":
                    return Level.Warning;
            }
            throw new Exception("Cannot unmarshal type Level");
        }

        public override void Write(Utf8JsonWriter writer, Level value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Level.Error:
                    JsonSerializer.Serialize(writer, "error", options);
                    return;
                case Level.Warning:
                    JsonSerializer.Serialize(writer, "warning", options);
                    return;
            }
            throw new Exception("Cannot marshal type Level");
        }

        public static readonly LevelConverter Singleton = new LevelConverter();
    }

    internal class RuleIdConverter : JsonConverter<RuleId>
    {
        public override bool CanConvert(Type t) => t == typeof(RuleId);

        public override RuleId Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "CS0102":
                    return RuleId.Cs0102;
                case "CS0108":
                    return RuleId.Cs0108;
                case "CS0111":
                    return RuleId.Cs0111;
                case "CS0114":
                    return RuleId.Cs0114;
                case "CS0115":
                    return RuleId.Cs0115;
                case "CS0234":
                    return RuleId.Cs0234;
                case "CS0426":
                    return RuleId.Cs0426;
                case "CS0505":
                    return RuleId.Cs0505;
                case "CS0507":
                    return RuleId.Cs0507;
                case "CS0508":
                    return RuleId.Cs0508;
                case "CS0533":
                    return RuleId.Cs0533;
                case "CS0534":
                    return RuleId.Cs0534;
                case "CS0535":
                    return RuleId.Cs0535;
                case "CS0540":
                    return RuleId.Cs0540;
                case "CS0549":
                    return RuleId.Cs0549;
                case "CS0618":
                    return RuleId.Cs0618;
                case "CS0737":
                    return RuleId.Cs0737;
                case "CS0738":
                    return RuleId.Cs0738;
                case "CS0809":
                    return RuleId.Cs0809;
                case "CS8764":
                    return RuleId.Cs8764;
                case "CS8766":
                    return RuleId.Cs8766;
                case "CS8768":
                    return RuleId.Cs8768;
                case "XAOBS001":
                    return RuleId.Xaobs001;
            }
            throw new Exception("Cannot unmarshal type RuleId");
        }

        public override void Write(Utf8JsonWriter writer, RuleId value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case RuleId.Cs0102:
                    JsonSerializer.Serialize(writer, "CS0102", options);
                    return;
                case RuleId.Cs0108:
                    JsonSerializer.Serialize(writer, "CS0108", options);
                    return;
                case RuleId.Cs0111:
                    JsonSerializer.Serialize(writer, "CS0111", options);
                    return;
                case RuleId.Cs0114:
                    JsonSerializer.Serialize(writer, "CS0114", options);
                    return;
                case RuleId.Cs0115:
                    JsonSerializer.Serialize(writer, "CS0115", options);
                    return;
                case RuleId.Cs0234:
                    JsonSerializer.Serialize(writer, "CS0234", options);
                    return;
                case RuleId.Cs0426:
                    JsonSerializer.Serialize(writer, "CS0426", options);
                    return;
                case RuleId.Cs0505:
                    JsonSerializer.Serialize(writer, "CS0505", options);
                    return;
                case RuleId.Cs0507:
                    JsonSerializer.Serialize(writer, "CS0507", options);
                    return;
                case RuleId.Cs0508:
                    JsonSerializer.Serialize(writer, "CS0508", options);
                    return;
                case RuleId.Cs0533:
                    JsonSerializer.Serialize(writer, "CS0533", options);
                    return;
                case RuleId.Cs0534:
                    JsonSerializer.Serialize(writer, "CS0534", options);
                    return;
                case RuleId.Cs0535:
                    JsonSerializer.Serialize(writer, "CS0535", options);
                    return;
                case RuleId.Cs0540:
                    JsonSerializer.Serialize(writer, "CS0540", options);
                    return;
                case RuleId.Cs0549:
                    JsonSerializer.Serialize(writer, "CS0549", options);
                    return;
                case RuleId.Cs0618:
                    JsonSerializer.Serialize(writer, "CS0618", options);
                    return;
                case RuleId.Cs0737:
                    JsonSerializer.Serialize(writer, "CS0737", options);
                    return;
                case RuleId.Cs0738:
                    JsonSerializer.Serialize(writer, "CS0738", options);
                    return;
                case RuleId.Cs0809:
                    JsonSerializer.Serialize(writer, "CS0809", options);
                    return;
                case RuleId.Cs8764:
                    JsonSerializer.Serialize(writer, "CS8764", options);
                    return;
                case RuleId.Cs8766:
                    JsonSerializer.Serialize(writer, "CS8766", options);
                    return;
                case RuleId.Cs8768:
                    JsonSerializer.Serialize(writer, "CS8768", options);
                    return;
                case RuleId.Xaobs001:
                    JsonSerializer.Serialize(writer, "XAOBS001", options);
                    return;
            }
            throw new Exception("Cannot marshal type RuleId");
        }

        public static readonly RuleIdConverter Singleton = new RuleIdConverter();
    }

    internal class CategoryConverter : JsonConverter<Category>
    {
        public override bool CanConvert(Type t) => t == typeof(Category);

        public override Category Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "Compiler":
                    return Category.Compiler;
                case "CustomObsolete":
                    return Category.CustomObsolete;
                case "NotConfigurable":
                    return Category.NotConfigurable;
                case "Telemetry":
                    return Category.Telemetry;
            }
            throw new Exception("Cannot unmarshal type Category");
        }

        public override void Write(Utf8JsonWriter writer, Category value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Category.Compiler:
                    JsonSerializer.Serialize(writer, "Compiler", options);
                    return;
                case Category.CustomObsolete:
                    JsonSerializer.Serialize(writer, "CustomObsolete", options);
                    return;
                case Category.NotConfigurable:
                    JsonSerializer.Serialize(writer, "NotConfigurable", options);
                    return;
                case Category.Telemetry:
                    JsonSerializer.Serialize(writer, "Telemetry", options);
                    return;
            }
            throw new Exception("Cannot marshal type Category");
        }

        public static readonly CategoryConverter Singleton = new CategoryConverter();
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
