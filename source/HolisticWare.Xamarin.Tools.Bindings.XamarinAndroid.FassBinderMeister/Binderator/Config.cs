// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuHolisticWare.Xamarin.Tools.Bindings.XamarinAndroid.FassBinderMeister.BinderatorickType;
//
//    var config = Config.FromJson(jsonString);

namespace HolisticWare.Xamarin.Tools.Bindings.XamarinAndroid.FassBinderMeister.Binderator
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Config
    {
        [JsonProperty("mavenRepositoryType")]
        public string MavenRepositoryType { get; set; }

        [JsonProperty("slnFile")]
        public string SlnFile { get; set; }

        [JsonProperty("additionalProjects")]
        public string[] AdditionalProjects { get; set; }

        [JsonProperty("templates")]
        public Template[] Templates { get; set; }

        [JsonProperty("artifacts")]
        public Artifact[] Artifacts { get; set; }
    }

    public partial class Artifact
    {
        [JsonProperty("groupId")]
        public string GroupId { get; set; }

        [JsonProperty("artifactId")]
        public string ArtifactId { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("nugetId")]
        public string NugetId { get; set; }

        [JsonProperty("dependencyOnly")]
        public bool DependencyOnly { get; set; }

        [JsonProperty("nugetVersion", NullValueHandling = NullValueHandling.Ignore)]
        public string NugetVersion { get; set; }
    }

    public partial class Template
    {
        [JsonProperty("templateFile")]
        public string TemplateFile { get; set; }

        [JsonProperty("outputFileRule")]
        public string OutputFileRule { get; set; }
    }


    public partial class Config
    {
        public static Config[] FromJson(string json)
            =>
            JsonConvert.DeserializeObject<Config[]>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Config[] self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                VersionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class VersionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Version) || t == typeof(string);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            //switch (value)
            //{
            //    case "1.0":
            //        return Version.The10;
            //    case "1.0.0":
            //        return Version.The100;
            //    case "1.0.1":
            //        return Version.The101;
            //    case "1.0.2":
            //        return Version.The102;
            //    case "1.1.3":
            //        return Version.The113;
            //    case "2.0.0":
            //        return Version.The200;
            //    case "2.0.1":
            //        return Version.The201;
            //    case "27.1.0":
            //        return Version.The2710;
            //}
            throw new Exception("Cannot unmarshal type Version");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Version)untypedValue;
            //switch (value)
            //{
            //    case Version.The10:
            //        serializer.Serialize(writer, "1.0");
            //        return;
            //    case Version.The100:
            //        serializer.Serialize(writer, "1.0.0");
            //        return;
            //    case Version.The101:
            //        serializer.Serialize(writer, "1.0.1");
            //        return;
            //    case Version.The102:
            //        serializer.Serialize(writer, "1.0.2");
            //        return;
            //    case Version.The113:
            //        serializer.Serialize(writer, "1.1.3");
            //        return;
            //    case Version.The200:
            //        serializer.Serialize(writer, "2.0.0");
            //        return;
            //    case Version.The201:
            //        serializer.Serialize(writer, "2.0.1");
            //        return;
            //    case Version.The2710:
            //        serializer.Serialize(writer, "27.1.0");
            //        return;
            //}
            throw new Exception("Cannot marshal type Version");
        }

        public static readonly VersionConverter Singleton = new VersionConverter();
    }
}
